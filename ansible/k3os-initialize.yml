---
#
# ? Playbook vars + copy k3os script
#
- name: Playbook vars + copy k3os script
  hosts: m1.macminis.net
  become: true
  gather_facts: false
  tasks:
    - name: Define global vars
      ansible.builtin.set_fact:
        cmd_cluster_init: []
        cmd_servers: []
        cmd_agents: []
        list_cluster_init: []
        list_servers: []
        list_agents: []
        short_list_workers: []
        short_list_data: []
    - name: Copy k3os init script
      ansible.builtin.copy:
        src: files/k3os-vm-init
        dest: /usr/local/bin/
        owner: root
        group: root
        mode: 0755

#
# ? Generate cluster + servers + agents script commands
#
- name: Generate cluster init command
  hosts: k3os-server-01.macminis.net
  gather_facts: false
  serial: 1
  tasks:
    - name: Define cluster init command
      ansible.builtin.set_fact:
        # yamllint disable-line rule:line-length
        cmd_string: "k3os-vm-init --proxmox_node {{ proxmox_node }} --vm_id {{ proxmox_vmid }} --vm_name {{ inventory_hostname_short }}"

    - name: Append cluster init command to list
      ansible.builtin.set_fact:
        cmd_cluster_init: "{{ hostvars['m1.macminis.net'].cmd_cluster_init + [ cmd_string ] }}"
        list_cluster_init: "{{ hostvars['m1.macminis.net'].list_cluster_init + [ inventory_hostname ] }}"
      delegate_to: m1.macminis.net
      delegate_facts: true

- name: Generate servers init commands
  hosts: k3os_servers:!k3os-server-01.macminis.net
  gather_facts: false
  serial: 1
  tasks:
    - name: Define server command
      ansible.builtin.set_fact:
        # yamllint disable-line rule:line-length
        cmd_string: "k3os-vm-init --proxmox_node {{ proxmox_node }} --vm_id {{ proxmox_vmid }} --vm_name {{ inventory_hostname_short }}"

    - name: Append server command to list
      ansible.builtin.set_fact:
        cmd_servers: "{{ hostvars['m1.macminis.net'].cmd_servers + [ cmd_string ] }}"
        list_servers: "{{ hostvars['m1.macminis.net'].list_servers + [ inventory_hostname ] }}"
      delegate_to: m1.macminis.net
      delegate_facts: true

- name: Generate agents init commands
  hosts: k3os_agents, k3os_data
  gather_facts: false
  serial: 1
  tasks:
    - name: Define agent command
      ansible.builtin.set_fact:
        # yamllint disable-line rule:line-length
        cmd_string: "k3os-vm-init --proxmox_node {{ proxmox_node }} --vm_id {{ proxmox_vmid }} --vm_name {{ inventory_hostname_short }}"

    - name: Append agent command to list
      ansible.builtin.set_fact:
        cmd_agents: "{{ hostvars['m1.macminis.net'].cmd_agents + [ cmd_string ] }}"
        list_agents: "{{ hostvars['m1.macminis.net'].list_agents + [ inventory_hostname ] }}"
      delegate_to: m1.macminis.net
      delegate_facts: true

- name: Generate workers list
  hosts: k3os_agents
  gather_facts: false
  serial: 1
  tasks:
    - name: Append agent command to list
      ansible.builtin.set_fact:
        short_list_workers: "{{ hostvars['m1.macminis.net'].short_list_workers + [ inventory_hostname_short ] }}"
      delegate_to: m1.macminis.net
      delegate_facts: true

- name: Generate data list
  hosts: k3os_data
  gather_facts: false
  serial: 1
  tasks:
    - name: Append agent command to list
      ansible.builtin.set_fact:
        short_list_data: "{{ hostvars['m1.macminis.net'].short_list_data + [ inventory_hostname_short ] }}"
      delegate_to: m1.macminis.net
      delegate_facts: true

#
# ? Initialize cluster
#
- name: Initialize cluster
  hosts: m1.macminis.net
  become: true
  gather_facts: false
  tasks:
    - name: Show cluster init commands
      ansible.builtin.debug:
        var: "{{ item }}"
      with_items: cmd_cluster_init

    - name: Initialize cluster
      ansible.builtin.command: "{{ item }}"
      register: cluster_init_output
      with_items: "{{ cmd_cluster_init }}"

    - name: Wait until cluster-init server is accesible (timeout 5 mins)
      ansible.builtin.wait_for:
        port: 6443
        host: "{{ item }}"
        delay: 5
      with_items: "{{ list_cluster_init }}"

#
# ? Initialize + join remaining servers + agents to cluster
#
- name: Initialize nodes
  hosts: m1.macminis.net
  become: true
  gather_facts: false
  tasks:
    # Servers joining cluster
    - name: Show servers join cluster commands
      ansible.builtin.debug:
        var: "{{ item }}"
      with_items: cmd_servers

    - name: Initialize + join servers to cluster
      ansible.builtin.command: "{{ item }}"
      register: cmd_servers_output
      with_items: "{{ cmd_servers }}"

    - name: Wait until servers are accesible (timeout 5 mins)
      ansible.builtin.wait_for:
        port: 6443
        host: "{{ item }}"
        delay: 5
      with_items: "{{ list_servers }}"

    # Agents joining cluster
    - name: Show agents join cluster commands
      ansible.builtin.debug:
        var: "{{ item }}"
      with_items: cmd_agents

    - name: Initialize + join agents to cluster
      ansible.builtin.command: "{{ item }}"
      register: cmd_agents_output
      with_items: "{{ cmd_agents }}"

    - name: Wait until agents are accesible (timeout 5 mins)
      ansible.builtin.wait_for:
        port: 22
        host: "{{ item }}"
        delay: 5
      with_items: "{{ list_agents }}"

#
# ? Wait until k3s service is running on all agents
# ? Note: there's no python in k3os
#
- name: Wait for "k3s" service
  hosts: k3os_agents, k3os_data
  gather_facts: false
  vars:
    ansible_user: rancher
  tasks:
    - name: Wait for "k3s" to be running (timeout 5 mins)
      raw:
        ps aux | grep k3s-service
      register: result
      until: "'supervise-daemon' in result.stdout"
      retries: 60
      delay: 5

#
# ? Fetch kube_config from 1st master
# ? Note: k3os servers don't have python, need to use scp directly
#
- name: Fetch kube_config
  hosts: m1.macminis.net
  gather_facts: false
  tasks:
    - name: Fetch kube_config
      ansible.builtin.command:
        scp rancher@{{ list_cluster_init[0] }}:/etc/rancher/k3s/k3s.yaml ~/.kube/config
      changed_when: false
      delegate_to: localhost

    - name: Set agents role
      ansible.builtin.command:
        kubectl label nodes {{ item }} kubernetes.io/role=worker --overwrite
      with_items: "{{ short_list_workers }}"
      changed_when: false
      delegate_to: localhost

    - name: Set data role
      ansible.builtin.command:
        kubectl label nodes {{ item }} kubernetes.io/role=data --overwrite
      with_items: "{{ short_list_data }}"
      changed_when: false
      delegate_to: localhost
