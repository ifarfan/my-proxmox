#!/usr/bin/env bash
#
#  VM-INIT: Initialize k3os VM
#
config() {
    # Sleep lapses
    SLEEP_SECS_SHORT=2
    SLEEP_SECS_MEDIUM=5
    SLEEP_SECS_LONG=20

    # Reset global timer
    SECONDS=0

    PROXMOX_NODES=(
      'macmini1'
      'macmini2'
      'macmini3'
    )

    # Colors
    NOCOLOR=0
    BLACK=$(tput setaf 0)
    RED=$(tput setaf 1)
    GREEN=$(tput setaf 2)
    YELLOW=$(tput setaf 3)
    BLUE=$(tput setaf 4)
    BOLD=$(tput bold)
    NORMAL=$(tput sgr0)
}


char_escape() {
    #
    # Get keymap value from /usr/share/kvm/keymaps/en-us
    #
    local CHAR
    case ${1} in
        "'") CHAR='apostrophe';;
        ' ') CHAR='spc';;
        '!') CHAR='shift-1';;
        '"') CHAR='shift-apostrophe';;
        '#') CHAR='shift-3';;
        '$') CHAR='shift-4';;
        '%') CHAR='shift-5';;
        '&') CHAR='shift-7';;
        '(') CHAR='shift-9';;
        ')') CHAR='shift-0';;
        '*') CHAR='shift-8';;
        '+') CHAR='shift-equal';;
        ',') CHAR='comma';;
        '-') CHAR='minus';;
        '.') CHAR='dot';;
        '/') CHAR='slash';;
        ':') CHAR='shift-semicolon';;
        ';') CHAR='semicolon';;
        '<') CHAR='shift-comma';;
        '=') CHAR='equal';;
        '>') CHAR='shift-dot';;
        '?') CHAR='shift-slash';;
        '@') CHAR='shift-2';;
        '[') CHAR='bracket_left';;
        '\') CHAR='backslash';;
        ']') CHAR='bracket_right';;
        '^') CHAR='shift-6';;
        '_') CHAR='shift-minus';;
        '`') CHAR='grave';;
        '{') CHAR='shift-bracket_left';;
        '|') CHAR='shift-backslash';;
        '}') CHAR='shift-bracket_right';;
        '~') CHAR='shift-grave';;
        *) CHAR=${1};;
    esac
    echo "${CHAR}"
}


log_line() {
    #
    #  Write message to console, with optional alert flag
    #  - "":  None
    #  - "E": Error (red)
    #  - "O": OK (green)
    #  - "W": Warning (yellow)
    #
    local MSG_TYPE=$1; local MSG=$2

    case "$MSG_TYPE" in
        'E') echo -e "${BLACK}${BOLD}[${NORMAL}k3os${BLACK}${BOLD}]${NORMAL} ${RED}${BOLD}Error:${NORMAL} ${MSG}";;
        'O') echo -e "${BLACK}${BOLD}[${NORMAL}k3os${BLACK}${BOLD}]${NORMAL} ${GREEN}${BOLD}OK:${NORMAL} ${MSG}";;
        'W') echo -n "${BLACK}${BOLD}[${NORMAL}k3os${BLACK}${BOLD}]${NORMAL} ${YELLOW}${BOLD}Wait:${NORMAL} ${MSG}";;
        *)   echo -e "${BLACK}${BOLD}[${NORMAL}k3os${BLACK}${BOLD}]${NORMAL} ${MSG}";;
    esac
}


usage() {
    #
    #  Show usage + send output also to stderr
    #
    echo -e "Usage${BLACK}${BOLD}:${NORMAL} ${GREEN}${BOLD}${0##*/}${NORMAL} ${YELLOW}${BOLD}--proxmox_node${NORMAL} ${BLUE}<PROXMOX_NODE>${NORMAL} ${YELLOW}${BOLD}--vm_id${NORMAL} ${BLUE}<VM_ID>${NORMAL} ${YELLOW}${BOLD}--vm_name${NORMAL} ${BLUE}<VM_NAME>${NORMAL}

Parameters${BLACK}${BOLD}:${NORMAL}
${YELLOW}${BOLD}--proxmox_node${NORMAL}${BLACK} ${BLUE}<PROXMOX_NODE>${NORMAL}${BLACK}${BOLD}:${NORMAL}
  Available proxmox_node(s)${BLACK}${BOLD}:${NORMAL} ${BOLD}${PROXMOX_NODES[*]}${NORMAL}

${YELLOW}${BOLD}--vm_id${NORMAL}${BLACK} ${BLUE}<VM_ID>${NORMAL}${BLACK}${BOLD}:${NORMAL}
  A valid VM ID ${BLACK}${BOLD}(${NORMAL}integer${BLACK}${BOLD})${NORMAL}

${YELLOW}${BOLD}--vm_name${NORMAL}${BLACK} ${BLUE}<VM_NAME>${NORMAL}${BLACK}${BOLD}:${NORMAL}
  A valid VM hostname ${BLACK}${BOLD}(${NORMAL}string${BLACK}${BOLD})${NORMAL}
" 1>&2

    exit 1
}


init() {
    # Cloud-init URL
    CLOUD_INIT_URL="https://raw.githubusercontent.com/ifarfan/my-proxmox/main/terraform/k3os/configs/${VM_NAME}.yml"

    #  Show debug values
    log_line 'O' "All checks passed!"
    log_line '' "- PROXMOX_NODE   : ${YELLOW}${BOLD}${PROXMOX_NODE}${NORMAL}"
    log_line '' "- VM_ID          : ${YELLOW}${BOLD}${VM_ID}${NORMAL}"
    log_line '' "- VM_NAME        : ${YELLOW}${BOLD}${VM_NAME}${NORMAL}"
    log_line '' "- CLOUD_INIT_URL : ${YELLOW}${BOLD}${CLOUD_INIT_URL}${NORMAL}"
    log_line '' ""
    log_line '' "Executing ${GREEN}${BOLD}VM Initialization${NORMAL} now...\n"

    # Start VM
    log_line 'O' "Start VM: '${GREEN}${BOLD}${VM_NAME}${NORMAL}'"
    pvesh create /nodes/${PROXMOX_NODE}/qemu/${VM_ID}/status/start
    sleep ${SLEEP_SECS_MEDIUM}

    # Install steps via console

    # Do full install: "Down arrow"
    log_line 'O' "Begin Installation"
    pvesh set /nodes/${PROXMOX_NODE}/qemu/${VM_ID}/sendkey --key down-kp_enter
    sleep ${SLEEP_SECS_LONG}

    # Use cloud-init: "Y"
    log_line 'O' "Use Cloud-init configuration"
    pvesh set /nodes/${PROXMOX_NODE}/qemu/${VM_ID}/sendkey --key shift-y-kp_enter
    sleep ${SLEEP_SECS_SHORT}

    # Split URL into single, non-char-repeatable strings
    local PREV_CHAR=''; local I; local STR_COUNTER=0; local IS_STR_RESET=false
    local STR_SO_FAR=''; local STR_LIST=();
    local DOT_SO_FAR=''; local DOT_LIST=();
    for (( I=0; I<${#CLOUD_INIT_URL}; I++ )); do
        # Fetch 1 char
        CHAR=$(char_escape "${CLOUD_INIT_URL:$I:1}")

        # Increase char counter
        ((STR_COUNTER+=1))

        # Stop if chars repeat or we've reached the max length
        if [[ "${PREV_CHAR}" == "${CHAR}" || "${STR_COUNTER}" -eq "20" ]]; then
            # Add to list and reset running string + counter
            STR_LIST+=(${STR_SO_FAR})
            STR_SO_FAR="${CHAR}"
            STR_COUNTER=0

            # Keep track of dots
            DOT_LIST+=(${DOT_SO_FAR});
            DOT_SO_FAR='.'
        # Stop if char uses "shift"
        elif [[ "${CHAR}" == *"shift"* ]]; then
            # Add to list and reset running string + counter
            STR_SO_FAR+="-${CHAR}"
            STR_LIST+=(${STR_SO_FAR})
            STR_SO_FAR=""
            STR_COUNTER=0
            IS_STR_RESET=true

            # Keep track of dots
            DOT_SO_FAR+='.'
            DOT_LIST+=(${DOT_SO_FAR});
        else
            # Append to running string
            if [[ "$I" -eq "0" || "${IS_STR_RESET}" = true ]]; then
                # 1st char of string
                STR_SO_FAR="${CHAR}"
                IS_STR_RESET=false

                # Keep track of dots
                DOT_SO_FAR='.'
            else
                STR_SO_FAR+="-${CHAR}"

                # Keep track of dots
                DOT_SO_FAR+='.'
            fi
        fi

        # Keep track of last character
        PREV_CHAR="${CHAR}"
    done
    # Capture last string into list
    STR_LIST+=(${STR_SO_FAR})
    DOT_LIST+=(${DOT_SO_FAR})

    # Send URL in non-colliding strings
    for (( I=0; I<${#STR_LIST[@]}; I++ )); do
        # Send string
        pvesh set /nodes/${PROXMOX_NODE}/qemu/${VM_ID}/sendkey --key ${STR_LIST[$I]}

        # Display dots
        echo -n "${BLACK}${BOLD}${DOT_LIST[$I]}${NORMAL}"
    done

    # Last enter after URL
    pvesh set /nodes/${PROXMOX_NODE}/qemu/${VM_ID}/sendkey --key kp_enter
    sleep ${SLEEP_SECS_SHORT}
    echo ''

    # Accept disk format: "enter"
    log_line 'O' "Reformat Disk "
    pvesh set /nodes/${PROXMOX_NODE}/qemu/${VM_ID}/sendkey --key shift-y-kp_enter

    # Show timer
    log_line '' ""
    log_line '' "${BLUE}${BOLD}Time elapsed${NORMAL}: $(time_elapsed)"
}


check_values() {
    #
    #  Check parameters supplied
    #

    #  Check for valid <PROXMOX_NODE>
    # shellcheck disable=SC2076
    if [[ ! ${PROXMOX_NODES[*]} =~ "${PROXMOX_NODE}" ]]; then
        log_line 'E' "Invalid ${YELLOW}${BOLD}proxmox_node${NORMAL}: '${RED}${BOLD}${PROXMOX_NODE}${NORMAL}'"
        log_line 'E' "Valid values for --${YELLOW}${BOLD}proxmox_node${NORMAL}: ${BOLD}${PROXMOX_NODES[*]}${NORMAL}\n"
        usage
    fi

    #  Check for valid <VM_ID>
    if ! [[ "$VM_ID" =~ ^[0-9]+$ ]]; then
        log_line 'E' "Invalid ${YELLOW}${BOLD}vm_id${NORMAL}: '${RED}${BOLD}${VM_ID}${NORMAL}'"
        log_line 'E' "Valid values for --${YELLOW}${BOLD}vm_id${NORMAL}: ${BOLD}any valid integer${NORMAL}\n"
        usage
    fi

    #  Check for valid <VM_NAME>
    if [[ -z "$VM_NAME" ]]; then
        log_line 'E' "Invalid ${YELLOW}${BOLD}vm_name${NORMAL}: '${RED}${BOLD}${VM_NAME}${NORMAL}'"
        log_line 'E' "Valid values for --${YELLOW}${BOLD}vm_name${NORMAL}: ${BOLD}any valid hostname${NORMAL}\n"
        usage
    fi
}


time_elapsed() {
    #
    #  Format-friendly time counter
    #
    local SECS_CNT=$SECONDS

    local MINS=0; local SECS=0;
    if [[ $SECS_CNT -gt 59 ]]; then
        SECS=$(( SECS_CNT%60 ))
        SECS_CNT=$(( SECS_CNT/60 ))
        [[ $SECS_CNT -gt 59 ]] && MINS=$(( SECS_CNT%60 )) || MINS=${SECS_CNT}
    else
        SECS=${SECS_CNT}
    fi
    echo "${BOLD}${MINS}${NORMAL} mins, ${BOLD}${SECS}${NORMAL} secs"
}


#
#  Main()
#
config

[[ $# -eq 0 ]] && usage                         #  No parameters passed, exit out

PARAMS=""
while (( "$#" )); do                            #  Parse parameters
    [[ $1 == --*=* || $1 == -*=* ]] && set -- "${1%%=*}" "${1#*=}" "${@:2}"

    # shellcheck disable=SC2221,SC2222,SC2034
    case "$1" in
        --proxmox_node)
            [[ -n "$2" ]] && PROXMOX_NODE=$2; shift 2 || break
            ;;
        --vm_id)
            [[ -n "$2" ]] && VM_ID=$2; shift 2 || break
            ;;
        --vm_name)
            [[ -n "$2" ]] && VM_NAME=$2; shift 2 || break
            ;;
        -h|--help)
            usage
            ;;
        --)                                     # end argument parsing
            shift
            break
            ;;
        -*|--*=)                                # unsupported flags
            log_line 'E' "Unknown parameter ${RED}${BOLD}${1}${NORMAL}\n"
            usage
            ;;
        *)                                      # preserve positional arguments
            PARAM="$PARAMS $1"
            shift
            ;;
    esac
done

eval set -- "$PARAMS"                           # Set positional arguments in their proper place
check_values                                    # Check for valid values
init                                            # Run initialization steps

exit 0
